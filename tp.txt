


	

```matlab
function compute_quality_score_wx()
	clc;close all;clear all;
	
	%addpath('./_release')

    %% 方法、测试集
    methons = ["acevae3_1_0号实验"];
    testSetList = ["MEF"; "LIME"; "DICM"; "NPE"; "VV"; "ExDark120"];
    basicPath1 = "F:\Area 51\9.winter_is_here\storm\compare\ACE-VAE\";
    basicPath2 = '';

    %% 循环每个方法
    for idxM = 1 : length(methons)
        methonCur = methons(idxM);
        methonPath = strcat(basicPath1, '\', methoh);
        %% 循环每个测试集
        for idxT = 1 : length(testSetList)
            testSetCur = testSetList(idxM);		% 当前测试集
            testSetPath = strcat(methonPath, '\', testSetCur);	% 测试集路径
            testImgs = dir(testSetPath);			% 测试集中所有图像
            lenTestImgs = length(testImgs);
            if lenTestImgs == 0
                disp(['erro:' testSetCur 'is null.']);
                break;
            end

            % 定义存储各个图像质量评价方法的图像得分
            niqe = zeros(lenTestImgs, 1);	niqe(0) = "NIQE";
            piqe = zeros(lenTestImgs, 1);	piqe(0) = "PIQE";
            loe = zeros(lenTestImgs, 1);	loe(0)	= "LOE";
            brisque = zeros(lenTestImgs, 1); brisque(0) = "BRISQUE";
            sinq = zeros(lenTestImgs, 1);	sinq(0)	= "SINQ"

            %% 计算每张图像的质量得分
            for idxI = 3 : lenTestImgs
                % 读取每张图像
                imgName = testImgs(idxI).name;
                imgFullPath = strcat(testSetPath, '\', imgName);
                imgEnhanced = (im2double(imread(imgFullPath)));
                
                % 计算质量得分
                scoreNIQE = computeNIQE(imgEnhanced);	% NIQE
                scorePIQE = computePIQE(imgEnhanced);	% PIQE	
                scoreLOE = computeLOE(imgEnhanced);		% LOE
                scoreBRISQUE = computeBRISQUE(imgEnhanced);	% BRISQUE
                scoreSINQ = computeSINQ(imgEnhanced);	% SINQ
            end
        end	
    end

%% 保存数据
function saveDate(outPath, imgName, scoreNIQE, scorePIQE, scoreLOE, scoreBRISQUE, scoreSINQ)
	state_name = xlswrite(excelPath,imgName, '1', 'A');
	state_BRISQUE = xlswrite(excelPath,brisque, '1', 'B');

	if state_BRISQUE == 1 && state_name == 1
        disp(['*********************'])
        disp(['all data has saved.'])
	end

%% 计算SINQ
function score = computeSINQ(img)
	addpath('./SINQ_release');
	load model.mat;
	score = compute_score(img);
	strSINQ = ['SINQ : ' num2str(scoreSINQ)];

	
	
%% 计算LOE
function score = computeLOE(imgLL, imgEnhanced)
 	addpath('./LOE');
 	[m,n,k]=size(imgLL);

    %get the local maximum for each pixel of the input image
    win=7;
    imax=round(max(max(imgLL(:,:,1),imgLL(:,:,2)),imgLL(:,:,3)));
    imax=getlocalmax(imax,win);
    %get the local maximum for each pixel of the enhanced image
    emax=round(max(max(imgEnhanced(:,:,1),imgEnhanced(:,:,2)),imgEnhanced(:,:,3)));
    emax=getlocalmax(emax,win);

    %get the downsampled image
    blkwin=50;
    mind=min(m,n);
    step=floor(mind/blkwin);% the step to down sample the image
    blkm=floor(m/step);
    blkn=floor(n/step);
    ipic_ds=zeros(blkm,blkn);% downsampled of the input image
    epic_ds=zeros(blkm,blkn);% downsampled of the enhanced image
    LOE=zeros(blkm,blkn);%

    for i=1:blkm
        for j=1:blkn
            ipic_ds(i,j)=imax(i*step,j*step);
            epic_ds(i,j)=emax(i*step,j*step);
        end
    end

    for i=1:blkm
        for j=1:blkn%bug
            flag1=ipic_ds>=ipic_ds(i,j);
            flag2=epic_ds>=epic_ds(i,j);
            flag=(flag1~=flag2);
            LOE(i,j)=sum(flag(:));
        end
    end

    score=mean(LOE(:));
   	strLOE = ['LOE : ' num2str(scoreLOE)];
   	disp(strLOE)
 	
 %% 计算PIQE
 function score = computePIQE(img)
	score = piqe(img);
	strPIQE = ['PIQE : ' num2str(scorePIQE)];
	disp(strPIQE)
 
 %% 计算BRISQUE
 function score = computeBRISQUE(img)
 	addpath('./BRISQUE_release');
 	score = brisquescore(img);
 	strBRISQUE = ['BRISQUE : ' num2str(scoreBRISQUE)];
 	disp(strBRISQUE)
 
 %% 计算NIQE
 function score = computeNIQE(img)
 	addpath('./niqe_release');
 	load modelparameters.mat;

	blocksizerow    = 96;
    blocksizecol    = 96;
    blockrowoverlap = 0;
    blockcoloverlap = 0;
    score = computequality(img,blocksizerow,blocksizecol,blockrowoverlap,blockcoloverlap, ...
            mu_prisparam,cov_prisparam);
    strNIQE = ['NIQE : ' num2str(scoreNIQE)];
    disp(strNIQE)
 
 %% 输出提示信息
 function print(scoreNIQE, scorePIQE, scoreLOE, scoreSINQ, scoreBRISQUE)
 	brisque(index-2) = qualityscore;  
    name(index-2) = llName;
    disp(['----------------------------------'])
    disp([strcat('methon : ', methon)])
    disp([strcat('testset : ', llTestset)])
    disp(['index : ' num2str(index-2)])
    disp (['image :' llName])

```



